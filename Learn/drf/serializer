ериализаторы в Django REST Framework (DRF) представляют собой мощный инструмент для преобразования сложных типов данных,
 таких как объекты моделей Django, в структуры данных, которые можно легко сериализовать
 в JSON, XML и другие форматы, а также десериализовать обратно в объекты Python.

from rest_framework import serializers
from .models import Game

class GameSerializer(serializers.ModelSerializer):
    class Meta:
        model = Game
        fields = '__all__'

Здесь GameSerializer базируется на модели Game. Опция fields = '__all__' говорит сериализатору использовать все поля модели.
Вы можете явно указать список полей, которые вы хотите сериализовать, вместо __all__.
--------------------------------------------------------------------------------------------------------------------------
В классе Meta сериализатора Django REST Framework (DRF) вы можете определять различные настройки, которые влияют на
поведение и конфигурацию сериализатора. Вот некоторые из наиболее часто используемых параметров, которые вы можете прописывать в классе Meta:

1)model: Указывает модель, с которой связан сериализатор. DRF будет использовать эту модель для определения полей и их типов.

2)fields и exclude: Определяют, какие поля модели должны быть включены или исключены из сериализации.

3)read_only_fields: Список полей, которые должны быть только для чтения (не могут быть обновлены через сериализатор).

4)validators: Позволяет определить пользовательские валидаторы для полей.

5)extra_kwargs: Позволяет устанавливать дополнительные атрибуты для полей, такие как required, allow_null, default и другие.

6)list_serializer_class и detail_serializer_class: Позволяют задать отдельные сериализаторы для списковых представлений и детальных представлений.

7)fields_to_serialize: Определяет, какие поля модели должны быть сериализованы. Это полезно, если вы хотите ограничить количество полей для сериализации в разных представлениях.

8)ordering: Задает порядок, в котором объекты будут отображаться в списковых представлениях.

9)depth: Указывает глубину связанных объектов, которые также должны быть сериализованы.

10)unique_together: Определяет комбинации полей модели, которые должны быть уникальными.

11)indexes: Определяет индексы для полей модели.

12)constraints: Определяет ограничения для полей модели.

13)lookup_field и lookup_url_kwarg: Позволяют настроить поле, используемое для поиска объектов, и соответствующий URL-аргумент.

14)extra_fields: Позволяет добавлять дополнительные поля к сериализатору, которые не принадлежат модели.

15)exclude_fields: Позволяет исключить определенные поля из автоматически сгенерированных полей сериализатора.

Это лишь небольшой список настроек, которые можно прописывать в классе Meta. В зависимости от ваших потребностей,
 вы можете использовать различные параметры для настройки поведения и внешнего вида сериализаторов в DRF.

genres = serializers.SlugRelatedField(slug_field='name',read_only=True,many=True) --применяем для нашего поля genres  и
говорим что бы он выводил не по айди этого поля а по его name-это имя жанра таблицы Genre!many=True если записей много!
developer = serializers.SlugRelatedField(slug_field='name',read_only=True)
-----------------------------------------------------------------------------------------------------------------------
Добавления в базу данных!!
class ReviewCreateSerializer(serializers.ModelSerializer):
    '''Добавления отзыва'''

    class Meta:
        model = Reviews
        fields = "__all__"

class ReviewCreateView(APIView):
    """Добавления коментария к Игре"""

    def post(self, request):
        rewiew = ReviewCreateSerializer(data=request.data)
        if rewiew.is_valid():
            rewiew.save()
        return Response(status=201)